package com.xuexi.workbench.mapper;

import com.xuexi.workbench.domain.Activity;

import java.util.List;
import java.util.Map;

public interface ActivityMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbg.generated Wed Apr 27 15:15:52 CST 2022
     */
    int deleteByPrimaryKey(String id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbg.generated Wed Apr 27 15:15:52 CST 2022
     */
    int insertSelective(Activity record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbg.generated Wed Apr 27 15:15:52 CST 2022
     */
    Activity selectByPrimaryKey(String id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbg.generated Wed Apr 27 15:15:52 CST 2022
     */
    int updateByPrimaryKeySelective(Activity record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbg.generated Wed Apr 27 15:15:52 CST 2022
     */
    int updateByPrimaryKey(Activity record);

    /**
     *
     * @param activity
     * @return 保存创建的市场活动的信息
     */
    int insertActivity(Activity activity);

    /**
     * 根据条件分页查询市场活动的列表
     * @param map
     * @return
     */
    List<Activity> selectActivityByConditionForPage(Map<String,Object> map);

    /**
     * 根据条件查询市场活动的总条数
     * @param map
     * @return
     */
    Integer selectCountOfActivityByCondition(Map<String,Object> map);

    /**
     * 根据ids批量删除市场活动
     * @param ids
     * @return
     */
    Integer deleteActivityByIds(String[]  ids);

    /**
     * 根据id，查询市场活动列表，刷新到页面
     * @param id
     * @return
     */
    Activity selectActivityById(String id);

    /**
     * 根据传过来的id，进行对具体对象中数据的更新
     * @param id
     * @return
     */
    Integer updatActivityById(Map<String,Object> map);

    /**
     * 查询所有的市场活动
     * @return
     */
    List<Activity> selectAllActivitys();


    /**
     * 批量保存，创建的市场活动
     * @param activityList
     * @return
     */
    Integer insertActivityByList(List<Activity> activityList);

    /**
     * 根据ID来查询市场活动的明细信息
     * @param id
     * @return
     */
    Activity selectActivityForDetailById(String id);

    /**
     * 查询这条线索所参与过的所有的市场活动的明细信息
     * @param id
     * @return
     */
    List<Activity> selectActivityForDetailByClueId(String id);

    /**
     * 根据name模糊查询市场活动，并且把已经和这个clueid关联过得市场活动排除掉
     * @param map
     * @return
     */
    List<Activity> selectActivityForDetailByNameClueId(Map<String, Object> map);


    /**
     * 根据ids的数组，来查询所有的市场活动
     * @param ids
     * @return
     */
    List<Activity> selectActivityForDetailByIds(String[] ids);
}